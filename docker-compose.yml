services:
  postgres:
    image: postgres:17
    container_name: postgres_database
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s

  liquibase-migrations:
    image: liquibase/liquibase:4.29
    container_name: migrations
    env_file:
      - .env
    command:
      - --changelog-file=changelog/master.xml
      - --url=jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      - --username=${POSTGRES_USER}
      - --password=${POSTGRES_PASSWORD}
      - update
    volumes:
      - ./migrations/changelog:/liquibase/changelog
    networks:
      - backend
    depends_on:
      postgres:
        condition: service_healthy

  scrapper_api:
    build:
      context: .
      dockerfile: Dockerfile
    command: uvicorn src.server:app --host 0.0.0.0 --port 8000
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      - SCRAPPER_BASE_URL=${SCRAPPER_BASE_URL}
      - SCRAPPER_DEFAULT_URL=${SCRAPPER_DEFAULT_URL}
      - POSTGRES_HOST=postgres
    restart: on-failure
    networks:
      - backend
    depends_on:
      - liquibase-migrations
    volumes:
      - ./sessions:/app/sessions

  bot_service:
    build: .
    container_name: bot_service
    command: poetry run python -m src.main
    env_file:
      - .env
    environment:
      - SCRAPPER_BASE_URL=http://scrapper_api:8000
      - POSTGRES_HOST=postgres
    restart: on-failure
    networks:
      - backend
    depends_on:
      - scrapper_api
    volumes:
      - ./sessions:/app/sessions

volumes:
  postgres_data:

networks:
  backend:
    driver: bridge
